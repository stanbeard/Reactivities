{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextInput.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","console","log","headers","Authorization","response","a","anyResponse","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmail","Profiles","userName","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivity","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","groups","format","ProfileStore","profile","loadingProfile","uploading","loadingFollowings","activeTab","followings","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","setActiveTab","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","created","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","ProfileCard","Card","Header","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","activities","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","placeholder","MyDateInput","selected","useHistory","useParams","validationSchema","Yup","required","nullable","enableReinitialize","initialValues","onSubmit","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","type","password","setErrors","render","ValidationErrors","Message","err","i","Divider","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileContent","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.a5639f16.chunk.js","sourcesContent":["export interface Pagination \r\n{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 10) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { request } from \"http\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    console.log('Checking token');\r\n\r\n    if (token) {\r\n        config!.headers!.Authorization = `Bearer ${token}`;\r\n        console.log('Token set ' + token);\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n    if (process.env.NODE_ENV === 'development')\r\n        await sleep(1000);\r\n    \r\n        const pagination = response.headers['pagination'];\r\n\r\n    if (pagination) {\r\n        var anyResponse = response as AxiosResponse<PaginatedResult<any>>; \r\n        anyResponse.data = new PaginatedResult<any>(response.data, JSON.parse(pagination));\r\n        return anyResponse;\r\n    }\r\n\r\n    return response;\r\n    \r\n}, (error: AxiosError<any>) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof(data) === 'string')\r\n            {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for(const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please log in again');\r\n            } else {\r\n                toast.error('unauthorised');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<{}, AxiosResponse<T>>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<{}, AxiosResponse<T>>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(\"/activities\", { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete(`/activities/${id}`),\r\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmail: (email: string) => requests.get(`/account/resendEmail?email=${email}`)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (userName: string) => requests.get<Profile>(`/profiles/${userName}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<FormData, AxiosResponse<Photo>>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\r\n    deletePhoto: (id:string) => requests.delete(`/photos/${id}`),\r\n    updateFollowing: (userName: string) => requests.post(`/follow/${userName}`, {}),\r\n    listFollowings: (userName: string, predicate: string) => requests.get<Profile[]>(`/follow/${userName}?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName?: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements ActivityFormValues {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map<string, Activity>();\r\n\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((groups, activity) => {\r\n                const date = format(activity.date!, 'd MMMM yyyy');\r\n\r\n                // if groups[date] exists, append the activity to the end of the list, otherwise create a new array.\r\n                groups[date] = groups[date] ? [...groups[date], activity] : [activity];\r\n\r\n                return groups;\r\n            }, {} as { [key: string]: Activity[] })\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.userName === user.userName);\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.userName === activity.hostUserName);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user?.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = activity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivity = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (userName: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.userName === userName) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n\r\n    followings: Profile[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (userName: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(userName);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            if (!photo.isMain)\r\n            {\r\n                await agent.Profiles.deletePhoto(photo.id);\r\n                runInAction(() => {\r\n                    if (this.profile && this.profile.photos) {\r\n                        this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                    }\r\n                    this.loading = false;\r\n                });\r\n            }\r\n            \r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (userName: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(userName);\r\n            store.activityStore.updateAttendeeFollowing(userName);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName && this.profile.userName === userName)\r\n                {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName)\r\n                {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;                    \r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === userName) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","import { ConsoleLogger } from \"@microsoft/signalr/dist/esm/Utils\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);            \r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user)\r\n            this.user.image = image;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        });\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                    history.push('/activities');\r\n                })\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken)\r\n            apiLogin(this.fbAccessToken)\r\n        else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = window.setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        window.clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store)\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/chatComment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity?.id) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n            }).withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() =>  {\r\n                    comments.forEach(comment => {\r\n                        comment.created = new Date(comment.created + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n            \r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.created = new Date(comment.created);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                    <>\r\n                        <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                        <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                        <Menu.Item>\r\n                            <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\r\n                        </Menu.Item>\r\n                        <Menu.Item position='right'>\r\n                            <Image src={user?.image || '/assets/user.png'} avatar spaced='right'></Image>\r\n                            <Dropdown pointing='top left' text={user?.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>\r\n                    </>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.userName === profile.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, userName: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(userName, false) : updateFollowing(userName, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button \r\n                    fluid\r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button basic fluid color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.userName)} />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default function ProfileCard({ profile }: Props)\r\n{\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.userName}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.userName}\r\n                    trigger={\r\n                        <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                            <Image size='mini' circular src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} /> }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity.\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity.\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'd MMMM, yyyy H:mm')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n})","import { observer } from 'mobx-react-lite'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item content='All Activities' \r\n                    active={predicate.has('all')} \r\n                    onClick={() => setPredicate('all', 'true')}\r\n                    />\r\n                <Menu.Item content=\"I'm going\" \r\n                    active={predicate.has('isGoing')} \r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                    />\r\n                <Menu.Item content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')} \r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                    />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar onChange={(date: Date) => setPredicate('startDate', date)} value={ predicate.get('startDate') || new Date() }/>\r\n        </>\r\n    )\r\n})","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { Grid, Loader } from \"semantic-ui-react\"\r\nimport ActivityList from \"./ActivityList\"\r\nimport { useStore } from \"../../../app/stores/store\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\"\r\nimport ActivityFilters from \"./ActivityFilters\"\r\nimport { PagingParams } from \"../../../app/models/pagination\"\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\"\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1)\r\n            loadActivities();\r\n\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}>\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width=\"10\">\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    options: any;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers ] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required(),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required().nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id)\r\n        {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    // function handleChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    //     const { name, value } = event.target;\r\n\r\n    //     setActivity({...activity, [name]: value});\r\n    // }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik validationSchema={validationSchema}\r\n                enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <MyTextInput name='title' placeholder='title' />\r\n                        <MyTextArea rows={5} placeholder=\"Description\" name=\"description\" />\r\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\r\n                        <MyDateInput \r\n                            placeholderText=\"Date\" \r\n                            name=\"date\" \r\n                            showTimeSelect \r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy H:mm'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                        loading={isSubmitting} floated=\"right\" positive type=\"submit\" content=\"Submit\" />\r\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n});\r\n","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik initialValues={{ email: '', password: '', error: null }}\r\n        onSubmit={(values, { setErrors }) => userStore.login(values).catch(error => setErrors({ error: error.response.data }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}></Label>} />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n\r\n    );\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik initialValues={{ email: '', password: '', displayName: '', userName: '', error: null }}\r\n        onSubmit={(values, { setErrors }) => userStore.register(values).catch(error => setErrors({ error }))}\r\n        validationSchema={Yup.object({ \r\n            displayName: Yup.string().required(),\r\n            userName: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n        })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Register' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() => <ValidationErrors errors={errors.error} />} />\r\n                    <Button loading={isSubmitting} \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react'\r\nimport { useStore } from '../../app/stores/store'\r\nimport LoginForm from '../users/LoginForm'\r\nimport RegisterForm from '../users/RegisterForm'\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>or</Divider>\r\n                        <Button\r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n            </Container>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, Shift + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.created)}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                                <Comment.Actions>\r\n                                    <Comment.Action>Reply</Comment.Action>\r\n                                </Comment.Actions>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivity } } = useStore();\r\n\r\n    console.log(`Cancelled: ${activity.isCancelled}`);\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'd MMMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}\r\n                            onClick={cancelActivity}\r\n                            loading={loading} />\r\n                        <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'\r\n                            disabled={activity.isCancelled}\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'd MMMM yyyy H:mm')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'person' : 'people'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === host?.userName &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null); \r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Yeah we didn't find it.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>Return to Activities</Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings } = profileStore;\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings} >\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={profileStore.activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.userName} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n\r\n\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: '200px'\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Preview & Upload' />\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                            <Button basic color='red' icon='trash'\r\n                                                name={photo.id} \r\n                                                loading={target === photo.id && loading} \r\n                                                disabled={photo.isMain} \r\n                                                onClick={e => handleDeletePhoto(photo, e)} />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <Tab.Pane>About content</Tab.Pane> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <Tab.Pane>Events content</Tab.Pane> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)} \r\n        />\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponents\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { userName } = useParams<{ userName: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(userName);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, userName, setActiveTab]);\r\n\r\n    if (loadingProfile)\r\n        return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && <>\r\n                    <ProfileHeader profile={profile} />\r\n                    <ProfileContent profile={profile} />\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\nimport { Component } from 'react'\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest}: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (<Route\r\n        {...rest}\r\n        render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />);\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmail(email).then(() => {\r\n            toast.success('Email sent');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully registered.\r\n            </Header>\r\n            <p>Check your email</p>\r\n            {\r\n                email &&\r\n                <>\r\n                    <p>Click the resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default function ConfirmEmail() {\r\n    const { modalStore } = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmail(email).then(() => {\r\n            toast.success('Email sent');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success);\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        });\r\n    }, [Status.Failed, Status.Success, token, email]);\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return <div>\r\n                    <p>Failed</p>\r\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend' />\r\n                </div>\r\n            case Status.Success:\r\n                return <div>\r\n                    <p>Success</p>\r\n                    <Button primary onClick={() => modalStore.openModal(<LoginForm />)} />\r\n                </div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestErrors';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponents';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => {\r\n        commonStore.setAppLoaded();\r\n      })\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n  \r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route path='/' component={HomePage} exact />\r\n      <Route path='/(.+)'\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: \"7em\" }}>\r\n              <Switch>\r\n                <PrivateRoute path='/activities' component={ActivityDashboard} exact />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:userName' component={ProfilePage} />\r\n                <Route path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n                <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);    \r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop />\n        <App />\n      </Router>\n    </StoreContext.Provider>\n  , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}